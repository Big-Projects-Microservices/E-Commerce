services:
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus/config.yml
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./grafana/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
      - ./grafana/dashboards:/etc/grafana/dashboards

  loki:
    image: grafana/loki
    container_name: loki
    ports:
      - 3100:3100
    command: -config.file=/etc/loki/config.yml
    volumes:
      - ./loki/config.yml:/etc/loki/config.yml

  promtail:
    image: grafana/promtail
    container_name: promtail
    volumes:
      - /var/log:/var/log
      - /etc/machine-id:/etc/machine-id
      - ./promtail/config.yml:/etc/promtail/config.yml
    depends_on:
      - loki

  scylla:
    image: scylladb/scylla:5.4
    container_name: scylla
    ports:
      - 9042:9042 # CQL
      - 9180:9180 # Metrics
      - 10000:10000 # REST API
    volumes:
      - scylla-data:/var/lib/scylla
    command: --smp 1 --memory 750M
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "DESCRIBE KEYSPACES"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:17.4-alpine3.21
    container_name: postgres
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_ADMIN_USER}
      - POSTGRES_PASSWORD=${POSTGRES_ADMIN_PASSWORD}
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_ADMIN_USER}:${POSTGRES_ADMIN_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
    ports:
      - 9187:9187
    depends_on:
      - postgres

  rabbitmq:
    image: rabbitmq:4.0.8-management
    container_name: rabbitmq
    ports:
      - 5672:5672    # AMQP
      - 15672:15672  # Management UI
      - 15692:15692 # Metrics
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_ADMIN_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_ADMIN_PASSWORD}
    entrypoint: ["rabbitmq-server"]
    command: ["bash", "-c", "rabbitmq-plugins enable rabbitmq_prometheus && tail -f /dev/null"]
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis
    container_name: redis
    restart: unless-stopped
    ports:
      - 6379:6379

  redis-exporter:
    image: oliver006/redis_exporter
    container_name: redis-exporter
    restart: unless-stopped
    ports:
      - 9121:9121
    environment:
      - REDIS_ADDR=${REDIS_URL}
    depends_on:
      - redis

  minio:
    image: minio/minio
    container_name: minio
    restart: unless-stopped
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - minio-data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ADMIN_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ADMIN_PASSWORD}
    command: server /data --console-address ":9001"

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - 8080:80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - graphql-1
      - graphql-2
      - graphql-3

  graphql-1:
    build:
      context: ./graphql
      dockerfile: Dockerfile
    container_name: graphql-1
    environment:
      - RABBITMQ_URL=amqp://${RABBITMQ_ADMIN_USER}:${RABBITMQ_ADMIN_PASSWORD}@rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy
    expose:
      - 8000

  graphql-2:
    build:
      context: ./graphql
      dockerfile: Dockerfile
    container_name: graphql-2
    environment:
      - RABBITMQ_URL=amqp://${RABBITMQ_ADMIN_USER}:${RABBITMQ_ADMIN_PASSWORD}@rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy
    expose:
      - 8000

  graphql-3:
    build:
      context: ./graphql
      dockerfile: Dockerfile
    container_name: graphql-3
    environment:
      - RABBITMQ_URL=amqp://${RABBITMQ_ADMIN_USER}:${RABBITMQ_ADMIN_PASSWORD}@rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - 8000:8002
    expose:
      - 8000

  users:
    build:
      context: ./users
      dockerfile: Dockerfile
    container_name: users
    environment:
      - RABBITMQ_URL=amqp://${RABBITMQ_ADMIN_USER}:${RABBITMQ_ADMIN_PASSWORD}@rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy

  orders:
    build:
      context: ./orders
      dockerfile: Dockerfile
    container_name: orders
    environment:
      - POSTGRES_URL=postgres://${POSTGRES_ADMIN_USER}:${POSTGRES_ADMIN_PASSWORD}@postgres:5432/orders
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  scylla-data:
  prometheus-data:
  minio-data:
  postgres-data:
